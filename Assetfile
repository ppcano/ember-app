require "rake-pipeline-web-filters"
require "./rakep/ember_template_compiler"
require "./rakep/self_executing_filter"
require "./rakep/append_filter"
require "./rakep/precompiler_filter"
require "./rakep/es6_filter"

ES6ModuleFilter = RubyES6::RakeFilter

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8


# prepare handlebars compiler to precompile at the server side
puts 'Generating ember-handlebars-precompiler...'
input_file = "app/submodules/ember.js/packages_es6/ember-handlebars-compiler/lib/main.js"
compiler_path = "tmp/ember-handlebars-compiler.js"
EmberTemplateCompiler.generate(input_file, compiler_path)

#  Configure handlebars precompiler: handlebars and handlebars compiler paths
handlebars_path = "app/vendor/handlebars-v1.3.0.js" # or gem Handlebars::Source.bundled_path
HandlebarsPrecompilerFilter.configure(compiler_path, handlebars_path)

output_name = "output.js"
output "tmp"
input "app"  do
  
  # precompile templates
  # concat multiple files
  # require dependencies with es6 syntax ( optional depending on the import sequence)
  # convert to amd
  match "templates/**/*.handlebars" do
    filter HandlebarsPrecompilerFilter, template_path_root: "templates/"
		concat output_name
    filter AppendFilter, before: true, content: "import Ember from \"ember-metal/core\";\n import \"ember\";"
    filter ES6ModuleFilter, moduleName: 'app/templates'
  end

  match "app/lib/**/*.js" do

    filter ES6ModuleFilter, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
    }
		concat output_name
  end
  match "submodules/ember.js/packages/{rsvp,metamorph}/lib/main.js" do
		concat output_name
  end

  match "submodules/ember.js/packages/ember/lib/main.js" do
    filter ES6ModuleFilter, moduleName: 'ember'
		concat output_name
  end

  # concat amd files (do not need to be converted)
  match "submodules/ember.js/packages_es6/*/lib/**/*.amd.js" do
		concat output_name
  end

  match "submodules/ember-jj-abrams-resolver/packages/ember-resolver/lib/core.js" do
		concat output_name
  end

  # convert ember packages to amd
  match /submodules\/ember\.js\/packages_es6\/(ember-handlebars-compiler|container|ember-application|ember-debug|ember-extension-support|ember-handlebars|ember-metal|ember-routing|ember-runtime|ember-views)\/lib\/[^\s]+(?<!\.amd)\.js$/ do
    filter ES6ModuleFilter, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('submodules/ember.js/packages_es6/', '')
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
    }
    filter HandlebarsPrecompilerFilter, is_inline: true
		concat output_name
  end

  # Add Handlebars to global window to be accessible at ember-handlebars-compiler
  # otherwise, require('handlebars') fails
  match "vendor/handlebars.runtime-v1.3.0.js" do
    filter AppendFilter, before: false, content: "\nwindow.Handlebars = Handlebars\n"
    filter SelfExecutingFilter
		concat output_name
  end

  match "vendor/jquery-1.9.1.js" do
		concat output_name
  end

end


loader_path = "app/submodules/ember.js/packages/loader/lib/main.js"

output "public"
input "tmp"  do

	match /^#{output_name}$/ do
    filter SelfExecutingFilter

    #load ember loader impl and provides  global vars: define, requireModule, require, requirejs, Ember
    filter AppendFilter, before: true, path: loader_path
		concat "app.js"
	end

end
# vim: filetype=ruby
